ARRAYS

this is a linear data structure
this is a single variable which can store lot of data points
the array can store only one type of data
arrays are contiguous in memory

int marks[5] -> total 5 * 4 continuous bytes of memory

LOOPS ON ARRAYS 03.cpp

PASS BY REFRENCE 06.cpp 

it is used for the non primitive data types 
in pass by refrence the address are passed

arrays are passed by refrence by default (implicitly)

the changes in an external function is reflected in the main function 

the name of the array is a pointer pointing to the starting index, in the external function hte address is sent and all the 
changes are applied on the original array as well

LINEAR SEARCH 07.cpp

it works by using the loops 

the time complexity of linear search is O(n)

there is a better method of binary search
the time complexity of binary search is O(logn)

REVERSING AN ARRAY 09.cpp

there are two approaches
1. 2 pointer approach 
2. creating a duplicate array and then reversing it

2 pointer approach

get two pointers start and end 
continuously make start ++ and end-- and keep swaping values(arr [start], arr [end]) until start < end

duplicate array approach 

create a reverse array and loop it throught the original array assigning values from the end of original array

The two-pointer approach is better than the duplicate array approach for reversing an array because:

Space Efficiency:

The two-pointer approach reverses the array in place, meaning it does not require extra space.
The duplicate array approach requires O(n) extra space to store the reversed elements, leading to higher memory usage.

Time Complexity:

Both approaches have O(n) time complexity, as they iterate through the array once.
However, the two-pointer approach is more cache-friendly since it modifies elements directly in the original array.

Lower Overhead:

The two-pointer approach avoids the overhead of creating and initializing a new array, making it more efficient in practical use


11.cpp -> sum and product of all numbers in an array 
12.cpp -> swapping min and max nums in array 
13.ccp -> print all unique values in array 
14.cpp -> intersection of 2 arrays

the unique elements and the intersection can be done using hash maps